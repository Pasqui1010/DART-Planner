# DART-Planner: Development Environment
# Multi-stage Dockerfile for development with proper dependency management

# Base stage with common dependencies
FROM python:3.11-slim as base

# Install system dependencies in a single layer
RUN apt-get update && apt-get install -y --no-install-recommends \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    curl \
    git \
    vim \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user
RUN groupadd -r dartplanner && useradd -r -g dartplanner dartplanner
RUN mkdir -p /home/dartplanner && chown -R dartplanner:dartplanner /home/dartplanner

# Set working directory
WORKDIR /app

# Dependencies stage - cache Python dependencies separately
FROM base as deps

# Install build dependencies only for this stage
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    && rm -rf /var/lib/apt/lists/*

# Copy development lockfiles for better caching
COPY requirements/requirements-dev.txt ./requirements/requirements-dev.txt

# Install Python dependencies including development tools
RUN pip install --no-cache-dir --upgrade pip setuptools wheel
# Pre-install dependencies for 'airsim', which has a broken setup.py
RUN pip install --no-cache-dir --user numpy msgpack-rpc-python
RUN pip install --no-cache-dir --user -r requirements/requirements-dev.txt

# Build stage - install the package
FROM deps as builder

# Copy package files
COPY pyproject.toml ./
COPY src/ ./src/
COPY scripts/ ./scripts/
COPY tests/ ./tests/

# Install DART-Planner in development mode
RUN pip install --user -e .

# Development stage - minimal runtime image
FROM base as development

# Copy Python packages from builder
COPY --from=builder /root/.local /home/dartplanner/.local

# Copy source code and tests
COPY --from=builder /app/src/ ./src/
COPY --from=builder /app/scripts/ ./scripts/
COPY --from=builder /app/tests/ ./tests/
COPY pyproject.toml ./

# Copy development configuration files
COPY pytest.ini ./
COPY importlinter.ini ./

# Copy web demo files
COPY demos/web_demo/ ./web_demo/

# Copy configuration files
COPY config/ ./config/

# Set ownership
RUN chown -R dartplanner:dartplanner /app

# Switch to non-root user
USER dartplanner

# Environment setup
ENV PATH=/home/dartplanner/.local/bin:$PATH \
    PYTHONPATH=/app \
    DART_PLANNER_MODE=development \
    DART_SECRET_KEY=dev-secret-key \
    DART_ZMQ_SECRET=dev-zmq-secret \
    PYTHONUNBUFFERED=1

# Expose ports for development
EXPOSE 8080 8000

# Default command - start the web demo application
CMD ["python", "web_demo/app.py"] 