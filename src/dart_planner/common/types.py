from dataclasses import dataclass, field
from typing import List, Optional

import numpy as np


@dataclass
class Pose:
    """Represents position and orientation (in radians, as roll/pitch/yaw or quaternion)."""
    position: np.ndarray = field(default_factory=lambda: np.zeros(3))
    orientation: np.ndarray = field(default_factory=lambda: np.zeros(3))  # roll, pitch, yaw

@dataclass
class Twist:
    """Represents linear and angular velocity."""
    linear: np.ndarray = field(default_factory=lambda: np.zeros(3))
    angular: np.ndarray = field(default_factory=lambda: np.zeros(3))

@dataclass
class Accel:
    """Represents linear and angular acceleration."""
    linear: np.ndarray = field(default_factory=lambda: np.zeros(3))
    angular: np.ndarray = field(default_factory=lambda: np.zeros(3))

@dataclass
class DroneState:
    """Represents the complete state of the drone at a single point in time."""

    timestamp: float
    position: np.ndarray = field(default_factory=lambda: np.zeros(3))
    velocity: np.ndarray = field(default_factory=lambda: np.zeros(3))
    attitude: np.ndarray = field(
        default_factory=lambda: np.zeros(3)
    )  # Roll, Pitch, Yaw
    angular_velocity: np.ndarray = field(default_factory=lambda: np.zeros(3))
    motor_rpms: Optional[np.ndarray] = field(default_factory=lambda: np.zeros(4))


@dataclass
class ControlCommand:
    """Represents the output of the low-level controller, sent to the motors."""

    thrust: float
    torque: np.ndarray = field(
        default_factory=lambda: np.zeros(3)
    )  # Roll, Pitch, Yaw moments


@dataclass
class BodyRateCommand:
    """Represents body-rate control command for PX4 compatibility."""
    
    thrust: float  # Normalized thrust (0-1)
    body_rates: np.ndarray = field(
        default_factory=lambda: np.zeros(3)
    )  # Roll, Pitch, Yaw rates (rad/s)


@dataclass
class Trajectory:
    """Represents a time-indexed sequence of desired states, generated by the planner."""

    timestamps: np.ndarray
    positions: np.ndarray
    velocities: Optional[np.ndarray] = None
    accelerations: Optional[np.ndarray] = None
    attitudes: Optional[np.ndarray] = None  # Roll, Pitch, Yaw (rad)
    body_rates: Optional[np.ndarray] = None  # Roll, Pitch, Yaw rates (rad/s)
    thrusts: Optional[np.ndarray] = None  # Thrust magnitudes (N)
    yaws: Optional[np.ndarray] = None
    yaw_rates: Optional[np.ndarray] = None


@dataclass
class EstimatedState:
    """Standardized output of a state estimator (EKF2, AirSim, etc)."""
    timestamp: float
    pose: Pose = field(default_factory=Pose)
    twist: Twist = field(default_factory=Twist)
    accel: Accel = field(default_factory=Accel)
    covariance: Optional[np.ndarray] = None  # 9x9 or 15x15 covariance matrix, if available
    source: str = "unknown"  # e.g., 'PX4_EKF2', 'AirSim', etc.
