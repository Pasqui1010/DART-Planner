#
# MAIN UNIFIED CI WORKFLOW
# This workflow runs on all pushes and PRs. It covers linting, type-checking, security audits, and fast tests.
# All contributors should use this as the reference for CI checks. Redundant workflows have been removed.

name: Professional Quality Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

# Cancel in-progress runs on new commits to same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality-checks:
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        include:
          - python-version: "3.10"
            cache-key: "main"
          - python-version: "3.9"
            cache-key: "legacy"
          - python-version: "3.11"
            cache-key: "latest"
          - python-version: "3.12"
            cache-key: "experimental"
    runs-on: ubuntu-latest
    name: Code Quality & Security Checks (Python ${{ matrix.python-version }})

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.cache-key }}-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.cache-key }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip pip-tools
        # Install dependencies from lockfiles for reproducible builds
        pip install -r requirements/requirements-ci.txt
        pip install --no-deps -e .

    - name: Code formatting check
      run: |
        echo "Checking code formatting with black..."
        black --check --diff src/ tests/ experiments/ scripts/ --exclude="legacy/|src/legacy/"

    - name: Import sorting check
      run: |
        echo "Checking import sorting with isort..."
        isort --check-only --diff src/ tests/ experiments/ scripts/ --skip legacy/ --skip src/legacy/

    - name: Linting
      run: flake8 src/ tests/ scripts/

    - name: YAML linting
      run: yamllint .

    - name: Markdown linting
      run: markdownlint '**/*.md' docs/

    - name: Link checking
      run: |
        echo "🔗 Checking for broken links in documentation..."
        # Install linkchecker if not available
        pip install linkchecker || echo "linkchecker not available, trying alternative"
        # Try to check links in docs directory
        if command -v linkchecker &> /dev/null; then
          linkchecker --ignore-url="^mailto:" --ignore-url="^#" docs/ || echo "Link check completed with warnings"
        else
          echo "⚠️ Linkchecker not available, skipping link validation"
        fi

    - name: Import-linter (enforce architecture)
      run: lint-imports --config importlinter.ini

    - name: DI Container validation
      run: python scripts/validate_di_containers.py

    - name: Dependency conflict detection
      run: |
        echo "🔍 Checking for dependency conflicts..."
        pip check
        echo "✅ No dependency conflicts found"

    - name: Lockfile validation
      run: |
        echo "🔍 Validating lockfile consistency..."
        python scripts/update_dependencies.py validate
        echo "✅ Lockfile is up to date"

    - name: Type checking
      run: mypy src/ tests/ scripts/

    - name: Security audit with pip-audit
      run: |
        echo "🔒 Running security audit with pip-audit..."
        pip-audit --format=json --output=pip-audit-report.json || true
        if [ -f pip-audit-report.json ]; then
          echo "📊 Security audit completed. Check pip-audit-report.json for details."
          cat pip-audit-report.json | jq '.vulnerabilities | length' || echo "No vulnerabilities found or jq not available"
        fi

    - name: Safety check
      run: |
        echo "🛡️ Running safety check..."
        safety check --json --output=safety-report.json || true
        if [ -f safety-report.json ]; then
          echo "📊 Safety check completed. Check safety-report.json for details."
        fi

    - name: Bandit security linter (Strict Mode)
      run: |
        echo "🔍 Running Bandit security linter with strict HIGH vulnerability enforcement..."
        bandit -r src/ -f json -o bandit-report.json -c .bandit
        if [ -f bandit-report.json ]; then
          echo "📊 Bandit scan completed. Check bandit-report.json for details."
          # Parse results to check for HIGH severity issues
          python -c "import json; import sys; data = json.load(open('bandit-report.json')); high_issues = [i for i in data.get('results', []) if i.get('issue_severity') == 'HIGH']; [print(f'❌ Found {len(high_issues)} HIGH severity security issues:'), [print(f'  - {i.get(\"issue_text\", \"Unknown\")} in {i.get(\"filename\", \"Unknown\")}:{i.get(\"line_number\", \"?\")}') for i in high_issues], sys.exit(1)] if high_issues else print('✅ No HIGH severity security issues found')"
        fi

    - name: Secret scanning with TruffleHog
      run: |
        echo "🔍 Running secret scanning with TruffleHog..."
        # Install TruffleHog if not available
        pip install trufflehog || echo "TruffleHog not available, skipping secret scan"
        # Run secret scan (continue on error to avoid blocking builds)
        trufflehog --only-verified --format json . > trufflehog-report.json 2>/dev/null || echo "Secret scan completed"

    - name: Container vulnerability scan
      run: |
        echo "🔍 Running container vulnerability scan..."
        # Install Trivy if available
        if command -v trivy &> /dev/null; then
          echo "Trivy found, scanning for vulnerabilities..."
          trivy fs --format json --output trivy-report.json . || echo "Trivy scan completed"
        else
          echo "Trivy not available, skipping container scan"
        fi

    - name: Run fast test suite with coverage
      env:
        MPLBACKEND: Agg  # Disable interactive back-end to avoid hangs
      run: |
        pytest -m "not slow" -n auto --cov=src --cov=dart_planner --cov-report=term-missing --cov-report=xml --cov-fail-under=75

    - name: Run performance regression tests
      env:
        MPLBACKEND: Agg
      run: |
        echo "🏃 Running performance regression tests..."
        pytest tests/test_performance_regression.py -m "performance" -v --benchmark-only

    - name: Run real-time latency tests
      env:
        MPLBACKEND: Agg
      run: |
        echo "⚡ Running real-time latency tests..."
        pytest tests/test_real_time_latency.py::test_real_time_latency_requirements -v
        pytest tests/test_real_time_latency.py::test_latency_consistency -v

    - name: Run gateway security tests
      env:
        DART_SECRET_KEY: test_secret_key_value_123456789
      run: |
        echo "🔐 Running gateway security tests..."
        pytest tests/test_gateway_security.py tests/test_security_fixes.py -v

    - name: Run audit compliance
      run: python -m pytest -q tests/validation/01_test_audit_improvements.py

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: coverage.xml

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ matrix.python-version }}
        path: |
          pip-audit-report.json
          safety-report.json
          bandit-report.json
          trufflehog-report.json
          trivy-report.json

  auto-format:
    runs-on: ubuntu-latest
    name: Auto Format Code
    # Only run on pull requests from the same repository (not forks) or pushes to feature branches
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) ||
      (github.event_name == 'push' && github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop')
    permissions:
      contents: write  # allow committing auto-format changes back to branch
      pull-requests: write  # allow commenting on PRs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-format-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-format-

      - name: Install formatting tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort

      - name: Format code with black
        run: black src/ tests/ experiments/ scripts/ --exclude="legacy/|src/legacy/"

      - name: Sort imports with isort
        run: isort src/ tests/ experiments/ scripts/ --skip legacy/ --skip src/legacy/

      - name: Check for changes
        id: verify-changed-files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "🎨 Auto-format code with black and isort"
          git push

      - name: Comment on PR
        if: github.event_name == 'pull_request' && steps.verify-changed-files.outputs.changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "🎨 Code has been automatically formatted with black and isort."
            });

  security-scan:
    runs-on: ubuntu-latest
    needs: quality-checks
    name: Comprehensive Security Analysis

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-security-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-security-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install dependencies from pyproject.toml for security scan
        pip install .
        pip install "[.ci]"

    - name: Comprehensive security scan
      run: |
        echo "🔒 Running comprehensive security scan..."
        
        # Run pip-audit with detailed output
        echo "=== PIP-AUDIT RESULTS ==="
        pip-audit --format=table || echo "pip-audit found vulnerabilities"
        
        echo "=== SAFETY CHECK RESULTS ==="
        safety check --full-report || echo "safety check found issues"
        
        echo "=== BANDIT SECURITY SCAN (STRICT MODE) ==="
        bandit -r src/ -f txt -c .bandit || echo "bandit scan completed"
        
        echo "=== DEPENDENCY VULNERABILITY SUMMARY ==="
        pip-audit --format=json | jq '.vulnerabilities | group_by(.dependency.name) | map({package: .[0].dependency.name, vulns: length}) | sort_by(.vulns) | reverse' || echo "No vulnerabilities found"

    - name: Comment on PR with security findings
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let securitySummary = "## 🔒 Security Scan Results\n\n";
          
          // Check for security reports
          const reports = ['pip-audit-report.json', 'safety-report.json', 'bandit-report.json'];
          let hasIssues = false;
          
          for (const report of reports) {
            try {
              const data = JSON.parse(fs.readFileSync(report, 'utf8'));
              if (data.vulnerabilities && data.vulnerabilities.length > 0) {
                hasIssues = true;
                securitySummary += `### ⚠️ ${report.replace('-report.json', '').toUpperCase()} Issues\n`;
                securitySummary += `Found ${data.vulnerabilities.length} potential security issues.\n\n`;
              }
            } catch (e) {
              // Report not found or invalid JSON
            }
          }
          
          if (!hasIssues) {
            securitySummary += "✅ No security vulnerabilities detected.\n\n";
          }
          
          securitySummary += "---\n*This comment was automatically generated by the security scan workflow.*";
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: securitySummary
          });

  e2e-tests:
    runs-on: ubuntu-latest
    needs: quality-checks
    name: End-to-End Tests
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-e2e-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-e2e-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/base.txt
        pip install -r requirements/dev.txt

    - name: Cache Playwright browsers
      uses: actions/cache@v3
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Install Playwright browsers
      run: |
        python -m playwright install --with-deps

    - name: Run E2E Playwright tests
      env:
        DART_SECRET_KEY: e2e_test_secret_key_value_123456789
      run: |
        pytest -m e2e tests/e2e/
