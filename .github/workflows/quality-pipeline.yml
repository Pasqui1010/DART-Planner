#
# MAIN UNIFIED CI WORKFLOW
# This workflow runs on all pushes and PRs. It covers linting, type-checking, security audits, and fast tests.
# All contributors should use this as the reference for CI checks. Redundant workflows have been removed.

name: Professional Quality Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    name: Code Quality & Security Checks

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Use consolidated requirement sets
        pip install -r requirements/ci.txt
        pip install -r requirements/dev.txt
        pip install -e .

    - name: Code formatting check
      run: |
        echo "Checking code formatting with black..."
        black --check --diff src/ tests/ experiments/ scripts/ --exclude="legacy/|src/legacy/"

    - name: Import sorting check
      run: |
        echo "Checking import sorting with isort..."
        isort --check-only --diff src/ tests/ experiments/ scripts/ --skip legacy/ --skip src/legacy/

    - name: Linting
      run: flake8 src/ tests/ scripts/

    - name: Type checking
      run: mypy src/ tests/ scripts/

    - name: Security audit with pip-audit
      run: |
        echo "üîí Running security audit with pip-audit..."
        pip-audit --format=json --output=pip-audit-report.json || true
        if [ -f pip-audit-report.json ]; then
          echo "üìä Security audit completed. Check pip-audit-report.json for details."
          cat pip-audit-report.json | jq '.vulnerabilities | length' || echo "No vulnerabilities found or jq not available"
        fi

    - name: Safety check
      run: |
        echo "üõ°Ô∏è Running safety check..."
        safety check --json --output=safety-report.json || true
        if [ -f safety-report.json ]; then
          echo "üìä Safety check completed. Check safety-report.json for details."
        fi

    - name: Bandit security linter (Strict Mode)
      run: |
        echo "üîç Running Bandit security linter with strict HIGH vulnerability enforcement..."
        bandit -r src/ -f json -o bandit-report.json -c .bandit
        if [ -f bandit-report.json ]; then
          echo "üìä Bandit scan completed. Check bandit-report.json for details."
          # Parse results to check for HIGH severity issues
          python -c "import json; import sys; data = json.load(open('bandit-report.json')); high_issues = [i for i in data.get('results', []) if i.get('issue_severity') == 'HIGH']; [print(f'‚ùå Found {len(high_issues)} HIGH severity security issues:'), [print(f'  - {i.get(\"issue_text\", \"Unknown\")} in {i.get(\"filename\", \"Unknown\")}:{i.get(\"line_number\", \"?\")}') for i in high_issues], sys.exit(1)] if high_issues else print('‚úÖ No HIGH severity security issues found')"
        fi

    - name: Run fast test suite with coverage
      env:
        MPLBACKEND: Agg  # Disable interactive back-end to avoid hangs
      run: |
        pytest -m "not slow" -n auto --cov=src --cov=dart_planner --cov-report=term-missing --cov-report=xml --cov-fail-under=75

    - name: Run real-time latency tests
      env:
        MPLBACKEND: Agg
      run: |
        echo "‚ö° Running real-time latency tests..."
        pytest tests/test_real_time_latency.py::test_real_time_latency_requirements -v
        pytest tests/test_real_time_latency.py::test_latency_consistency -v

    - name: Run gateway security tests
      env:
        DART_SECRET_KEY: test_secret_key_value_123456789
      run: |
        echo "üîê Running gateway security tests..."
        pytest tests/test_gateway_security.py tests/test_security_fixes.py -v

    - name: Run audit compliance
      run: python -m pytest -q tests/validation/01_test_audit_improvements.py

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.xml

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          pip-audit-report.json
          safety-report.json
          bandit-report.json

  security-scan:
    runs-on: ubuntu-latest
    needs: quality-checks
    name: Comprehensive Security Analysis

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/ci.txt

    - name: Comprehensive security scan
      run: |
        echo "üîí Running comprehensive security scan..."
        
        # Run pip-audit with detailed output
        echo "=== PIP-AUDIT RESULTS ==="
        pip-audit --format=table || echo "pip-audit found vulnerabilities"
        
        echo "=== SAFETY CHECK RESULTS ==="
        safety check --full-report || echo "safety check found issues"
        
        echo "=== BANDIT SECURITY SCAN (STRICT MODE) ==="
        bandit -r src/ -f txt -c .bandit || echo "bandit scan completed"
        
        echo "=== DEPENDENCY VULNERABILITY SUMMARY ==="
        pip-audit --format=json | jq '.vulnerabilities | group_by(.dependency.name) | map({package: .[0].dependency.name, vulns: length}) | sort_by(.vulns) | reverse' || echo "No vulnerabilities found"

    - name: Comment on PR with security findings
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let securitySummary = "## üîí Security Scan Results\n\n";
          
          // Check for security reports
          const reports = ['pip-audit-report.json', 'safety-report.json', 'bandit-report.json'];
          let hasIssues = false;
          
          for (const report of reports) {
            try {
              const data = JSON.parse(fs.readFileSync(report, 'utf8'));
              if (data.vulnerabilities && data.vulnerabilities.length > 0) {
                hasIssues = true;
                securitySummary += `### ‚ö†Ô∏è ${report.replace('-report.json', '').toUpperCase()} Issues\n`;
                securitySummary += `Found ${data.vulnerabilities.length} potential security issues.\n\n`;
              }
            } catch (e) {
              // Report not found or invalid JSON
            }
          }
          
          if (!hasIssues) {
            securitySummary += "‚úÖ No security vulnerabilities detected.\n\n";
          }
          
          securitySummary += "---\n*This comment was automatically generated by the security scan workflow.*";
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: securitySummary
          });

  e2e-tests:
    runs-on: ubuntu-latest
    needs: quality-checks
    name: End-to-End Tests
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/base.txt
        pip install -r requirements/dev.txt

    - name: Install Playwright browsers
      run: |
        python -m playwright install --with-deps

    - name: Run E2E Playwright tests
      env:
        DART_SECRET_KEY: e2e_test_secret_key_value_123456789
      run: |
        pytest -m e2e tests/e2e/
